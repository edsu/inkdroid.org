---
layout: post
status: publish
published: true
title: exhibit
author:
  display_name: ed
  login: ed
  email: ehs@pobox.com
  url: http://www.inkdroid.org
author_login: ed
author_email: ehs@pobox.com
author_url: http://www.inkdroid.org
wordpress_id: 140
wordpress_url: http://www.inkdroid.org/journal/2007/02/16/exhibit/
date: '2007-02-16 09:57:41 +0000'
date_gmt: '2007-02-16 16:57:41 +0000'
tags: []
comments: []
---

<p><a href="http://simile.mit.edu/exhibit"><img src="/images/exhibit.png" style="margin-right: 10px; border: 0; float: left;"/></a> If you haven't tried <a href="http://simile.mit.edu/exhibit/">Exhibit</a> out yet the simile folks have created a truly wonderful data publishing framework which runs entirely in your browser with a bit of javascript, html and css.</p>
<p>The remarkable part is that it requires no backend database, but simply operates on a stream of <a href="http://en.wikipedia.org/wiki/JSON">json</a>. If you have a couple minutes take a look at their <a href="http://simile.mit.edu/wiki/Exhibit/Getting_Started_Tutorial">Getting Started Tutorial</a> which shows you how to create a exhibit of MIT related nobel laureates with a tiny bit of HTML, CSS and JavaScript.</p>
<p>Just as an experiment I tried pointing it at my <a href="http://del.icio.us/feeds/json/inkdroid/metadata?raw=1&count=100">delicious json feed</a> for metadata. It turns out that exhibit wants json data to be a hash with a key 'items' that points to a list of items. In addition it also wants each item to have a 'label' key. I quickly <a href="/exhibit/delicious/delicious.json">reformatted</a> the delicious json with <a href="http://cheeseshop.python.org/pypi/simplejson">simplejson</a>, and got <a href="/exhibits/delicious">this</a>.</p>
<p>A few minutes later I <a href="http://simile.mit.edu/mail/ReadMsg?listName=General&msgId=14474">prodded</a> the simile folks to see if there is a way of filtering json data on the way into exhibit so that it can be normalized...time passes (like maybe an hour) and then I <a href="http://web.archive.org/web/20070321011919/http://simile.mit.edu:80/mail/ReadMsg?listName=General&amp;msgId=14476">hear</a> from <a href="http://ecmanaut.blogspot.com/">Johan Sundstr&ouml;m</a> that the latest/greatest exhibit code has this sort of filtering built in!</p>
<p>Tangential to the exhibit code, there has been an interesting <a href="http://simile.mit.edu/mail/BrowseList?listName=General&from=10038&to=10038&count=100&by=thread&paged=false&by=date" title="need to read the thread from the bottom up">discussion</a> recently about how to expose exhibit content to indexing services like google. Since exhibit content is generated with pure javascript, and google (as far as we know) primarily indexes html content--the exhibit content is rendered invisible. This is a problem that digital library applications and repositories have to deal with as well, so it may be of interest.</p>
