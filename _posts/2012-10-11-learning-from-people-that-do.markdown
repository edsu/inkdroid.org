---
layout: post
status: publish
published: true
title: learning from people that do
author:
  display_name: ed
  login: ed
  email: ehs@pobox.com
  url: http://www.inkdroid.org
author_login: ed
author_email: ehs@pobox.com
author_url: http://www.inkdroid.org
wordpress_id: 5136
wordpress_url: http://inkdroid.org/journal/?p=5136
date: '2012-10-11 10:15:12 +0000'
date_gmt: '2012-10-11 17:15:12 +0000'
tags: []
comments: []
---
<p>Anil Dash recently <a href="http://dashes.com/anil/2012/10/the-blue-collar-coder.html">wrote</a> a nice piece about the need for what he calls a Hi-Tech Vo-tech in the technology sector. If you are not familiar with it already, Vo-Tech is shorthand in the US for <a href="http://en.wikipedia.org/wiki/Vocational-technical_school">Vocational-technical school</a>, which provide focused training in specific areas, often on a part time basis. The Vo-Tech experience is markedly different from the typical 4 year university experience, which tends to be focused more on theory than practice.</p>
<p>I <em>totally</em> agree. </p>
<p>But if you are looking to work as a software developer, and to help build this amazing information space we call the World Wide Web, you don't need to wait for this dream of a better high school curriculum for computer programming, or Hi-Tech Vo-Techs to come to your town. I don't want to minimize the effort involved in finding your way into the workplace...it's hard, especially when there is competition from "qualified" candidates, and the skill sets seem to be constantly shifting. But here are some relatively simple steps you can take to get started.</p>
<h2>Look at Job Ads</h2>
<p>Go to the <a href="http://craigslist.org">CraigsList</a> for your area, look at what jobs are available under the <em>internet engineers</em> and <em>software / qa / dba</em> sections. I suggest Craigslist because of their local flavor, and the low cost to advertise, which typically means the jobs are at smaller companies who are less interested in finding someone with the right college degree, and more interested in finding someone who can get things done. Look for jobs that focus on what you can do rather than schooling. Don't apply for any of the jobs just yet. Note down the tools they want people to know: computer languages, operating systems, web frameworks, etc. Research them on <a href="http://wikipedia.org">Wikipedia</a>. Focus on tools that seem to pop up a lot, are opensource, and can be downloaded and used without cost. You don't need to do anything with them just yet though.</p>
<h2>Go To User Group Meetings</h2>
<p>I say opensource because opensource tools often have open communities around them. You should be able to find user groups in your area where people present on how they use these tools at their place of work. You might have to drive a while, or take a long bus/train ride -- but it's worth it. To find the meetings do some searches by technology and location on <a href="http://meetup.com">Meetup</a>. Alternatively you can Google for whatever the technology is + "user group" + your area (e.g. Philadelphia) and go through a few pages of results. At a user group meeting you will not only learn about the details of the technology, but you will meet actual, real people who are using it. There are often subtle differences in the cultures and communities of practice around software tools. Some user groups will feel more comfortable than others. Pay attention to your gut reactions--they are indicators of how much you would like a job working with the technology, and the people who like it. If you get a bad vibe, don't take it personally, try another meeting. Finding a job is often a matter of who you know, not what you know ... and user groups are a great place to get to know people working in the software development field. There's no online substitute for meeting people in real life.</p>
<h2>Use Social Networks</h2>
<p>At user group meetings you meet people who you can learn from. See if they have a blog, are on Twitter or Facebook. Maybe they use a social bookmarking tool you can follow. Or perhaps there are email discussion lists you can subscribe to. It's not stalking, these people are your mentors, learn from them. Take a dip into sites like <a href="http://news.ycombinator.com/">Hacker News</a> or <a href="http://www.reddit.com/r/programming/">Programming Reddit</a>. Watch the trends, you aren't being a fanboy/girl, you are learning about what people care about in the field. Don't feel bad if it's overwhelming (it's overwhelming to "experts" too), focus on what seems interesting. Also, cultivate your own online identity by posting stuff that you are interested in, or have questions about. Stay positive, and try not to bash things: people (and potential employers) are watching you the same way you are watching them.</p>
<h2>Read</h2>
<p>Sometimes the speakers at User Group meetings will also be authors of books. You will see books reviewed on sites like Hacker News. People you follow may mention the books they read, or have accounts on sites like <a href="http://goodreads.com">GoodReads</a>. See if a library or a bookstore has them, and go skim them. Buy or borrow the ones you like. Take notes about them online, so people can see your interests. Get a Google Reader account and follow blogs related to tools you would like to use. Look for tools that have approachable/readable tutorials. Try out the examples, and get a feel for how well the theory of the tutorial translates into practice. If tools don't install or seem to work the way they are described, don't feel like you did something wrong...move on to tools that work more smoothly, and fit your brain better. The benefit to focusing on opensource projects is that you will find more content about them online. You can can read code. Reading the source code for Ruby or GoLang is definitely not for the faint of heart, though it's nice you can do it. It's more important that you look at code that uses these tools. Go to <a href="http://github.com">GitHub</a> and see what projects there are that use the tool. Browse the source online, or clone the repositories to your workstation. See if you can help out with some low hanging fruit tasks in their issue queue.</p>
<h2>Find a Niche</h2>
<p>You are probably interested in things other than programming. For example I like libraries and archives, and the cultural heritage sector. I've found a virtual community of software developers in this area called <a href="http://code4lib.org">code4lib</a>, which helps me learn more about new projects, tools in the field, and is a way to get to know people. You may be surprised to find a similar community around something you are interested in: be it astrophysics, cartoons, music, maps, real estate, etc. If you don't find one, maybe think about starting one up--you might be surprised by how many people turn up. Sometimes there are collaborative projects that need your help like Wikipedia, <a href="http://www.openstreetmap.org/">Open Street Map</a> where the ability to automate mundane tasks is needed. You might not get paid for this work, but it will broaden your circle of contacts, deepen your technical skills, will build your self confidence, and will be something to put on your resume. The key thing that finding a niche can do is make your job search a bit easier, since technology skills cut across domains. You will also find that your niche has a particular set of tools that it likes to use. These typically aren't hard and fast rules about using X instead of Y, but are norms. Pay attention to them, and learn about things that interest you.</p>
<h2>Be Confident</h2>
<p>I don't mean to imply any of this is easy. It can be extremely difficult to get out of your comfort zone and explore things you don't know. But you will be rewarded for your efforts, by learning from people who actually do things in the world. I've worked with some really excellent software developers that didn't have a compsci degree, and some that I wasn't even sure if they graduated high school. Sometimes I wonder if I even graduated from high school. So be confident in your ability to learn and do this thing we call software development. Show that you are humble about what you don't know, and that you are hungry to learn it. Above all, don't buy into the cult of the "real programmer" ... she doesn't exist. There are just people to learn from, and if you are doing it right, you never stop learning.</p>
